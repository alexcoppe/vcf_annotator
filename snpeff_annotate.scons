"""
SnpEff Annotate:

SITE:

CITATION:

EXAMPLE:
    scons -f snpeff_annotate.scons  OUTPUT_DIR=snpeff OUTPUT_NAME=out.vcf GENOME_VERSION=GRCh37.75 DATA_DIR=~/annotations SNPEFF_PATH=~/local/snpEff/

"""

Import('*')

import os
import sys
import os.path

class bcolors:
    OKGREEN = '\033[92m'
    ERROR   = '\033[91m'
    ENDC    = '\033[0m'



try:
    env = env
except NameError as error:
    print(bcolors.ERROR + str(error) + bcolors.ENDC)
    print(bcolors.OKGREEN + "Lets go with the DEFAULT variables" + bcolors.ENDC)

    vars = Variables()
    #vars.Add("CPUS", "Number of CPUs to use", '1')
    vars.Add("SNPEFF_PATH", "SnpSift path", "/usr/local/snpEff")
    #vars.Add("DEBUG", "Show pipeline error messages", "F")
    vars.Add("OUTPUT_DIR", "Directory for output (default: ./SnpSift_annotation)", "./SnpSift_annotation")
    vars.Add("OUTPUT_NAME", "Output name (default: vcf_annotated.vcf)", "vcf_annotated.vcf")
    vars.Add("GENOME_VERSION", "Genome version to be used for annotation (default: GRCh37.75)", "GRCh37.75")
    vars.Add("DATA_DIR", "The directory used by -dataDir parameter from snpEff (default: ~/annotations)", "~/annotations")
    #vars.Add("ANNOTATION_FILE_PATH", "The location of the file used for annotation", "")
    #vars.Add("INPUT_FILE_PATH", "The location of the VCF file to be annotated", "")

    env = Environment(ENV = os.environ, SHELL = '/bin/bash', variables = vars)
    Decider('timestamp-newer')    

    #CPUS           = env["CPUS"]
    #DEBUG          = env["DEBUG"]
    OUTPUT_DIR     = env["OUTPUT_DIR"]
    OUTPUT_NAME    = env["OUTPUT_NAME"]
    GENOME_VERSION = env["GENOME_VERSION"]
    #ANNOTATION_FILE_PATH = env["ANNOTATION_FILE_PATH"]
    #INPUT_FILE_PATH      = env["INPUT_FILE_PATH"]
    SNPEFF_PATH     = os.path.join(env["SNPEFF_PATH"], "snpEff.jar")
    DATA_DIR        = env["DATA_DIR"] 
    

    try: 
        os.makedirs(OUTPUT_DIR)
    except OSError:
        if not os.path.exists(OUTPUT_DIR):
            sys.exit(bcolors.ERROR + "Error creating directory OUTPUT_DIR: {}. Check permissions".format(OUTPUT_DIR) + bcolors.ENDC + "\n")

    #if os.path.isfile(SNPSIFT_PATH) == False:
        #sys.exit(bcolors.ERROR + "File {} do not exists".format(SNPSIFT_PATH) + bcolors.ENDC + "\n")

    #if os.path.isfile(ANNOTATION_FILE_PATH) == False:
        #sys.exit(bcolors.ERROR + "File {} do not exists".format(ANNOTATION_FILE_PATH) + bcolors.ENDC + "\n")

    #if os.path.isfile(INPUT_FILE_PATH) == False:
        #sys.exit(bcolors.ERROR + "File {} to be annotated do not exists".format(INPUT_FILE_PATH) + bcolors.ENDC + "\n")
        

    #Help(vars.GenerateHelpText(env))

    #if vars.UnknownVariables():
        #list_of_unknown_keys = ",".join(vars.UnknownVariables().keys())
        #sys.stderr.write(bcolors.ERROR + "Unknown variables: " + list_of_unknown_keys + bcolors.ENDC + "\n")
        #Exit(1)

SNPEFF_TARGET = os.path.join(OUTPUT_DIR, OUTPUT_NAME)
command = "java -jar {} eff -v {} -stats snpEff_summary.html -dataDir {}  06_mutect2_filtered_high_moderate.vcf  ".format(SNPEFF_PATH, GENOME_VERSION, DATA_DIR) + " > ${TARGET}"
print(command)
from platform import python_version
print('Python', python_version())
env.Command(SNPEFF_TARGET, [], command)
#annotationCmd = "java -jar {} annotate ".format(SNPSIFT_PATH) + "${SOURCES[0]} ${SOURCES[1]}" + " > ${TARGET}"
#if DEBUG == "F":
    #annotationCmd += " 2> /dev/null "

#ANNOTATION_AND_INPUT_FILE_PATHS = [ANNOTATION_FILE_PATH, INPUT_FILE_PATH]
#env.Command(SNPSIFT_TARGET, ANNOTATION_AND_INPUT_FILE_PATHS, annotationCmd)
