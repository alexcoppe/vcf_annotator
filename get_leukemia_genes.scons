"""
Filter a VCF file by a list of leukemia genes build with iSeqs2 build_leukemia_genes_list.py script
It uses the filter_vcf_by_gene_name.py from iSeqs2

SITES:
    https://github.com/alexcoppe/iSeqs2/blob/master/scripts/build_leukemia_genes_list/README.md
    https://github.com/alexcoppe/iSeqs2/tree/master/scripts/filter_vcf_by_gene_names/README.md
    https://cancer.sanger.ac.uk/census
    http://soft.bioinfo-minzhao.org/lgl/

CITATION:
    - Liu Y, Luo M, Jin Z, Zhao M, Qu H. dbLGL: an online leukemia gene and literature database for the retrospective comparison of adult and childhood leukemia genetics with literature evidence. Database (Oxford). 2018 Jan 1;2018.
    - Sondka Z, Bamford S, Cole CG, Ward SA, Dunham I, Forbes SA. The COSMIC Cancer Gene Census: describing genetic dysfunction across all human cancers. Nat Rev Cancer. 2018 Nov;18(11):696-705


EXAMPLE:
    scons -f get_leukemia_genes.sc ons CPUS=2 DEBUG=T OUTPUT_DIR=leukemia OUTPUT_NAME=leukemia.vcf ANNOTATION_FILE_PATH=~/annotations/leukemia_genes.txt INPUT_FILE_PATH=09_filtered_by_fathmm/tumor_control_merged_snps_filtered_by_fathmm.vcf
"""

Import('*')

import os
import sys
import os.path

class bcolors:
    OKGREEN = '\033[92m'
    ERROR   = '\033[91m'
    ENDC    = '\033[0m'



try:
    env = env
except NameError as error:
    print(bcolors.ERROR + str(error) + bcolors.ENDC)
    print( bcolors.OKGREEN + "Lets go with the DEFAULT variables" + bcolors.ENDC)

    vars = Variables()
    vars.Add("CPUS", "Number of CPUs to use", '1')
    vars.Add("DEBUG", "Show pipeline error messages", "F")
    vars.Add("OUTPUT_DIR", "Directory for output (default: ./SnpSift_annotation)", "./SnpSift_annotation")
    vars.Add("OUTPUT_NAME", "Output name (default: vcf_annotated.vcf)", "vcf_annotated.vcf")
    vars.Add("ANNOTATION_FILE_PATH", "The location of the file used for annotation", "")
    vars.Add("INPUT_FILE_PATH", "The location of the VCF file to be annotated", "")

    env = Environment(ENV = os.environ, SHELL = '/bin/bash', variables = vars)
    Decider('timestamp-newer')    

    CPUS           = env["CPUS"]
    DEBUG          = env["DEBUG"]
    OUTPUT_DIR     = env["OUTPUT_DIR"]
    OUTPUT_NAME    = env["OUTPUT_NAME"]
    ANNOTATION_FILE_PATH = env["ANNOTATION_FILE_PATH"]
    INPUT_FILE_PATH      = env["INPUT_FILE_PATH"]
    

    try: 
        os.makedirs(OUTPUT_DIR)
    except OSError:
        if not os.path.exists(OUTPUT_DIR):
            sys.exit(bcolors.ERROR + "Error creating directory OUTPUT_DIR: {}. Check permissions".format(OUTPUT_DIR) + bcolors.ENDC + "\n")

    if os.path.isfile(ANNOTATION_FILE_PATH) == False:
        sys.exit(bcolors.ERROR + "File from option ANNOTATION_FILE_PATH: {} do not exists".format(ANNOTATION_FILE_PATH) + bcolors.ENDC + "\n")

    if os.path.isfile(INPUT_FILE_PATH) == False:
        sys.exit(bcolors.ERROR + "File {} to be annotated do not exists".format(INPUT_FILE_PATH) + bcolors.ENDC + "\n")
        

    Help(vars.GenerateHelpText(env))

    if vars.UnknownVariables():
        list_of_unknown_keys = ",".join(vars.UnknownVariables().keys())
        sys.stderr.write(bcolors.ERROR + "Unknown variables: " + list_of_unknown_keys + bcolors.ENDC + "\n")
        Exit(1)

TARGET = os.path.join(OUTPUT_DIR, OUTPUT_NAME)
annotationCmd = "filter_vcf_by_gene_names.py -g ${SOURCES[0]}  -v ${SOURCES[1]} > ${TARGET}"
if DEBUG == "F":
    annotationCmd += " 2> /dev/null "

ANNOTATION_AND_INPUT_FILE_PATHS = [ANNOTATION_FILE_PATH, INPUT_FILE_PATH]
env.Command(TARGET, ANNOTATION_AND_INPUT_FILE_PATHS, annotationCmd)
