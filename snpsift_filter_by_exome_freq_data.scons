"""
Filter variants by ExAC alternate allele frequency

EXAMPLE:
    scons -f snpsift_filter_by_exome_freq_data.scons DEBUG=T OUTPUT_DIR=freq_data OUTPUT_NAME=output_file.vcf INPUT_FILE_PATH=07_pass/tumor_control_merged_snps_pass.vcf SNPSIFT_PATH=~/local/snpEff/ AF_VALUE=0.03 AF=AF_NFE

SITE:
    https://www.biorxiv.org/content/10.1101/531210v3
    
CITATION:
    Konrad et al. Variation across 141,456 human exomes and genomes reveals the spectrum of loss-of-function intolerance across human protein-coding genes. bioRxiv 531210; doi: https://doi.org/10.1101/531210
"""


Import('*')

import os
import sys
import os.path

class bcolors:
    OKGREEN = '\033[92m'
    ERROR   = '\033[91m'
    ENDC    = '\033[0m'



try:
    env = env
except NameError as error:
    print(bcolors.ERROR + str(error) + bcolors.ENDC)
    print(bcolors.OKGREEN + "Lets go with the DEFAULT variables" + bcolors.ENDC)

    vars = Variables()
    vars.Add("SNPSIFT_PATH", "SnpSift path", "/usr/local/snpEff")
    vars.Add("DEBUG", "Show pipeline error messages", "F")
    vars.Add("OUTPUT_DIR", "Directory for output (default: ./SnpSift_annotation)", "./SnpSift_annotation")
    vars.Add("OUTPUT_NAME", "Output name (default: vcf_annotated.vcf)", "vcf_annotated.vcf")
    vars.Add("INPUT_FILE_PATH", "The location of the VCF file to be annotated", "")
    vars.Add("AF_VALUE", "Alternate allele frequency", "0.05")
    vars.Add("AF", "Allele Frequency among a particular population genotypes", "AF_NFE")

    env = Environment(ENV = os.environ, SHELL = '/bin/bash', variables = vars)
    Decider('timestamp-newer')    

    DEBUG                = env["DEBUG"]
    OUTPUT_DIR           = env["OUTPUT_DIR"]
    OUTPUT_NAME          = env["OUTPUT_NAME"]
    INPUT_FILE_PATH      = env["INPUT_FILE_PATH"]
    SNPSIFT_PATH         = os.path.join(env["SNPSIFT_PATH"], "SnpSift.jar")
    AF_VALUE             = env["AF_VALUE"]
    AF                   = env["AF"]
    

    try: 
        os.makedirs(OUTPUT_DIR)
    except OSError:
        if not os.path.exists(OUTPUT_DIR):
            sys.exit(bcolors.ERROR + "Error creating directory OUTPUT_DIR: {}. Check permissions".format(OUTPUT_DIR) + bcolors.ENDC + "\n")

    if os.path.isfile(SNPSIFT_PATH) == False:
        sys.exit(bcolors.ERROR + "File {} do not exists".format(SNPSIFT_PATH) + bcolors.ENDC + "\n")


    if os.path.isfile(INPUT_FILE_PATH) == False:
        sys.exit(bcolors.ERROR + "File {} to be filtered do not exists".format(INPUT_FILE_PATH) + bcolors.ENDC + "\n")
        

    Help(vars.GenerateHelpText(env))

    if vars.UnknownVariables():
        list_of_unknown_keys = ",".join(vars.UnknownVariables().keys())
        sys.stderr.write(bcolors.ERROR + "Unknown variables: " + list_of_unknown_keys + bcolors.ENDC + "\n")
        Exit(1)

SNPSIFT_TARGET = os.path.join(OUTPUT_DIR, OUTPUT_NAME)
filterCmd = "java -jar {} filter  \"({} <= {}) | !(exists {})\" ".format(SNPSIFT_PATH, AF, AF_VALUE, AF) + "${SOURCE}" + " > ${TARGET}"

if DEBUG == "F":
    filterCmd += " 2> /dev/null "

env.Command(SNPSIFT_TARGET, INPUT_FILE_PATH, filterCmd)
