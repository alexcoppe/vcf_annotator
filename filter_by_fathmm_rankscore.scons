"""
Filter an annotated VCF based on FATHMM_rankscore from dbNSF

SITE:
    https://github.com/alexcoppe/filter_by_fathmm
    https://sites.google.com/site/jpopgen/dbNSFP

CITATION:
    Liu X, Jian X, and Boerwinkle E. 2011. dbNSFP: a lightweight database of human non-synonymous SNPs and their functional predictions. Human Mutation. 32:894-899.
"""

Import('*')

import os
import sys
import os.path
import subprocess

class bcolors:
    OKGREEN = '\033[92m'
    ERROR   = '\033[91m'
    ENDC    = '\033[0m'



try:
    env = env
except NameError as error:
    print(bcolors.ERROR + str(error) + bcolors.ENDC)
    print(bcolors.OKGREEN + "Lets go with the DEFAULT variables" + bcolors.ENDC)

    vars = Variables()
    vars.Add("OUTPUT_DIR", "Directory for output (default: ./fathmm_rankscore_filtered)", "./fathmm_rankscore_filtered")
    vars.Add("OUTPUT_NAME", "Output name (default: vcf_fathmm_filtered.vcf)", "vcf_annotated.vcf")
    vars.Add("INPUT_FILE_PATH", "The location of the VCF file to be filtered", "")
    vars.Add("DBNSFP_FATHMM_RANKSCORE", "The FATHMM rankscore to be used (default: 0.7)", 0.7)

    env = Environment(ENV = os.environ, SHELL = '/bin/bash', variables = vars)
    Decider('timestamp-newer')    

    OUTPUT_DIR              = env["OUTPUT_DIR"]
    OUTPUT_NAME             = env["OUTPUT_NAME"]
    INPUT_FILE_PATH         = env["INPUT_FILE_PATH"]
    DBNSFP_FATHMM_RANKSCORE = env["DBNSFP_FATHMM_RANKSCORE"]

    try:
        # Once moved to python 3.5 change to subprocess.run
        subprocess.call(["filter_by_FATHMM"])
    except:
        sys.exit(bcolors.ERROR + "Could not run filter_by_FATHMM".format(OUTPUT_DIR) + bcolors.ENDC + "\n")

    try: 
        os.makedirs(OUTPUT_DIR)
    except OSError:
        if not os.path.exists(OUTPUT_DIR):
            sys.exit(bcolors.ERROR + "Error creating directory OUTPUT_DIR: {}. Check permissions".format(OUTPUT_DIR) + bcolors.ENDC + "\n")

    try:
        float(DBNSFP_FATHMM_RANKSCORE)
    except:
        sys.exit(bcolors.ERROR + "Error: DBNSFP_FATHMM_RANKSCORE: {} should be a number between 0 and 1.".format(DBNSFP_FATHMM_RANKSCORE) + bcolors.ENDC + "\n")

    if float(DBNSFP_FATHMM_RANKSCORE) < 0 or float(DBNSFP_FATHMM_RANKSCORE) > 1:
        sys.exit(bcolors.ERROR + "DBNSFP_FATHMM_RANKSCORE should be <= 0 and >= 1"  + bcolors.ENDC + "\n")

    if os.path.isfile(INPUT_FILE_PATH) == False:
        sys.exit(bcolors.ERROR + "File {} to be filtered do not exists".format(INPUT_FILE_PATH) + bcolors.ENDC + "\n")

    Help(vars.GenerateHelpText(env))

TARGET = os.path.join(OUTPUT_DIR, OUTPUT_NAME)
filter_command = "filter_by_FATHMM -s {}".format(DBNSFP_FATHMM_RANKSCORE)  + " ${SOURCE} > ${TARGET}"
env.Command(TARGET, INPUT_FILE_PATH, filter_command)
