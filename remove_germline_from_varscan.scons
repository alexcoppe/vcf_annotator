"""

Remove germline variants from vs_format_converter.py output which is a VCF derived from VarScan2 output

SITE:
    https://github.com/PoisonAlien/varscan_accessories

EXAMPLE:
    scons -f remove_germline_from_varscan.scons DEBUG=T VARSCAN_VCF=variants.vcf OUTPUT_FILE_NAME=no_germline_variants.vcf MAX_CONTROL_FREQUENCY=0

"""

Import('*')

import os
import sys
import os.path

class bcolors:
    OKGREEN = '\033[92m'
    ERROR   = '\033[91m'
    ENDC    = '\033[0m'

try:
    env = env
except NameError as error:
    print(bcolors.ERROR + str(error) + bcolors.ENDC)
    print(bcolors.OKGREEN + "Lets go with the DEFAULT variables" + bcolors.ENDC)

    vars = Variables()
    vars.Add("DEBUG", "Show pipeline error messages", "F")
    vars.Add("VARSCAN_VCF", "The path to the VCF obtained from VarScan2 output and vs_format_converter.py (default: ./sample.snp)", "./sample.snp")
    vars.Add("MAX_CONTROL_FREQUENCY", "The max frequency in control sample (default: 0)", "0")
    vars.Add("OUTPUT_FILE_NAME", "The output file path and name")

    env = Environment(ENV = os.environ, SHELL = '/bin/bash', variables = vars)
    Decider('timestamp-newer')    

    DEBUG                 = env["DEBUG"]
    VARSCAN_VCF           = env["VARSCAN_VCF"]
    OUTPUT_FILE_NAME      = env["OUTPUT_FILE_NAME"]
    MAX_CONTROL_FREQUENCY = env["MAX_CONTROL_FREQUENCY"]

    if os.path.isfile(VARSCAN_VCF) == False:
        sys.exit(bcolors.ERROR + "File {} do not exists".format(VARSCAN_VCF) + bcolors.ENDC + "\n")

    Help(vars.GenerateHelpText(env))

    remove_germline_from_varscanCMD = "remove_germline_variants_from_varscan.py -f {}".format(MAX_CONTROL_FREQUENCY) + " -v ${SOURCE} > ${TARGET}"

    if DEBUG == "F":
        extractFieldsCmd += " 2> /dev/null "

    env.Command([OUTPUT_FILE_NAME], [VARSCAN_VCF], remove_germline_from_varscanCMD)
