"""

Transform a vcf to a tab separated file with SnpSift extractFields command

SITE:
    http://snpeff.sourceforge.net/SnpSift.html#Extract

CITATION:
    A program for annotating and predicting the effects of single nucleotide polymorphisms, SnpEff: SNPs in the genome of Drosophila melanogasterstrain w1118; iso-2; iso-3.", Cingolani P, Platts A, Wang le L, Coon M, Nguyen T, Wang L, Land SJ, Lu X, Ruden DM. Fly (Austin). 2012 Apr-Jun;6(2):80-92. PMID: 22728672

EXAMPLE:
    scons -f snpsift_from_vcf_to_table.scons OUTPUT_DIR=tables OUTPUT_NAME=T_RICT_T_REM.txt INPUT_FILE_PATH=12_leukemia/T_RIC_T_REM_strelka2_snvs_cosmic_leukemia.vcf SNPSIFT_PATH=~/local/snpEff

"""


Import('*')

import os
import sys
import os.path

class bcolors:
    OKGREEN = '\033[92m'
    ERROR   = '\033[91m'
    ENDC    = '\033[0m'


def is_germline_or_somatic(f):
    try:
        open_file = open(f)
    except IOerror:
        sys.exit("Error: file {} does not appear to exists".format(f))
    for line in open_file.readlines():
        if line.startswith("#"):
            pass
        else:
            line_elements = line.split("\t")
            l = len(line_elements)
            if l == 10:
                return "germline"
            if l == 11:
                return "somatic"
    return "none"


try:
    env = env
except NameError as error:
    print(bcolors.ERROR + str(error) + bcolors.ENDC)
    print(bcolors.OKGREEN + "Lets go with the DEFAULT variables" + bcolors.ENDC)

    vars = Variables()
    vars.Add("SNPSIFT_PATH", "SnpSift path", "/usr/local/snpEff")
    vars.Add("DEBUG", "Show pipeline error messages", "F")
    vars.Add("OUTPUT_DIR", "Directory for output (default: ./SnpSift_annotation)", "./SnpSift_annotation")
    vars.Add("OUTPUT_NAME", "Output name (default: vcf_annotated.vcf)", "vcf_annotated.vcf")
    vars.Add("INPUT_FILE_PATH", "The location of the VCF file to be annotated", "")

    env = Environment(ENV = os.environ, SHELL = '/bin/bash', variables = vars)
    Decider('timestamp-newer')    

    DEBUG                = env["DEBUG"]
    OUTPUT_DIR           = env["OUTPUT_DIR"]
    OUTPUT_NAME          = env["OUTPUT_NAME"]
    INPUT_FILE_PATH      = env["INPUT_FILE_PATH"]
    SNPSIFT_PATH         = os.path.join(env["SNPSIFT_PATH"], "SnpSift.jar")
    

    try: 
        os.makedirs(OUTPUT_DIR)
    except OSError:
        if not os.path.exists(OUTPUT_DIR):
            sys.exit(bcolors.ERROR + "Error creating directory OUTPUT_DIR: {}. Check permissions".format(OUTPUT_DIR) + bcolors.ENDC + "\n")

    if os.path.isfile(SNPSIFT_PATH) == False:
        sys.exit(bcolors.ERROR + "File {} do not exists".format(SNPSIFT_PATH) + bcolors.ENDC + "\n")


    if os.path.isfile(INPUT_FILE_PATH) == False:
        sys.exit(bcolors.ERROR + "File {} to be filtered do not exists".format(INPUT_FILE_PATH) + bcolors.ENDC + "\n")
        

    Help(vars.GenerateHelpText(env))

    if vars.UnknownVariables():
        list_of_unknown_keys = ",".join(vars.UnknownVariables().keys())
        sys.stderr.write(bcolors.ERROR + "Unknown variables: " + list_of_unknown_keys + bcolors.ENDC + "\n")
        Exit(1)


SNPSIFT_TARGET = os.path.join(OUTPUT_DIR, OUTPUT_NAME)

germline_or_somatic = is_germline_or_somatic(INPUT_FILE_PATH)

if germline_or_somatic == "germline":
    extractFieldsCmd = "cat ${SOURCE} | " + "java -jar {}  extractFields - CHROM POS ID REF ALT FILTER ANN[*].GENE ANN[*].IMPACT CLNSIG FORMAT GEN[0] -s ',' -e '.' > ".format(SNPSIFT_PATH) +  "$TARGET"
if germline_or_somatic == "somatic":
    extractFieldsCmd = "cat ${SOURCE} | " + "java -jar {}  extractFields - CHROM POS ID REF ALT FILTER ANN[*].GENE ANN[*].IMPACT CLNSIG FORMAT GEN[0] GEN[1] -s ',' -e '.' > ".format(SNPSIFT_PATH) +  "$TARGET"
if germline_or_somatic == "none":
    extractFieldsCmd = "touch $TARGET"


if DEBUG == "F":
    extractFieldsCmd += " 2> /dev/null "

env.Command(SNPSIFT_TARGET, INPUT_FILE_PATH, extractFieldsCmd)
