Import('*')

import os
import sys
import os.path
from os import listdir
from os.path import isfile, join


class bcolors:
    OKGREEN = '\033[92m'
    ERROR   = '\033[91m'
    ENDC    = '\033[0m'


def build_output_name(vcf, software_for_annotation):
    vcf_prefix = vcf.split(".")[0]
    output_name = vcf_prefix + "_" + software_for_annotation +  ".vcf"
    return output_name


def is_a_strelka2_vcf(vcf_file_path):
    is_strelka_result = False
    f = open(vcf_file_path)
    for line in f:
        if line.startswith("#"):
            if line.startswith("##source=strelka"):
                is_strelka_result = True
                return is_strelka_result
    f.close()

    return False


try:
    env = env
except NameError as error:
    print(bcolors.ERROR + str(error) + bcolors.ENDC)
    print(bcolors.OKGREEN + "Lets go with the DEFAULT variables" + bcolors.ENDC)

    vars = Variables()
    vars.Add("CPUS", "Number of CPUs to use", '1')
    vars.Add("SNPSIFT_PATH", "SnpSift path", "/usr/local/snpEff")
    vars.Add("DEBUG", "Show pipeline error messages", "F")
    vars.Add("GNOMAD_ANNOTATION_FILE_PATH", "The location of the gnomAD file used for annotation", "")
    vars.Add("DBSNP_ANNOTATION_FILE_PATH", "The location of the dbSNP file used for annotation", "")
    vars.Add("DBNSFP_ANNOTATION_FILE_PATH", "The location of the dbNSFP file used for annotation", "")
    vars.Add("FATHMM_RANKSCORE", "The FATHMM_rankscore obtained by dbNSF (default = 0.7)", "0.7")
    vars.Add("GENOME_VERSION", "The genome version to be used in SnpEff annotation (default = GRCh37.75)", "GRCh37.75")
    vars.Add("SNPEFF_DATA_DIR", "The directory where the SnpEff data is present or will be downloaded (default=~/annotations)", "~/annotations")
    vars.Add("AF_VALUE", "Alternate allele frequency", "0.05")
    vars.Add("AF", "Allele Frequency among a particular population genotypes", "AF_NFE")
    vars.Add("CLINVAR_ANNOTATION_FILE_PATH", "The location of the ClinVar file used for annotation (default = None)", "")
    vars.Add("JUNK_GENES_FILE_PATH", "The location of the junk_genes.txt (default = None", "")
    vars.Add("LEUKEMIA_GENES", "The location of the file containing the leukemia genes (default = None)", "")

    env = Environment(ENV = os.environ, SHELL = '/bin/bash', variables = vars)
    Decider('timestamp-newer')    

    CPUS                         = env["CPUS"]
    vcf_dir                      = "00_starting_vcfs"
    DEBUG                        = env["DEBUG"]
    GNOMAD_ANNOTATION_FILE_PATH  = env["GNOMAD_ANNOTATION_FILE_PATH"]
    DBSNP_ANNOTATION_FILE_PATH   = env["DBSNP_ANNOTATION_FILE_PATH"]
    DBNSFP_ANNOTATION_FILE_PATH  = env["DBNSFP_ANNOTATION_FILE_PATH"]
    SNPSIFT_PATH                 = os.path.join(env["SNPSIFT_PATH"], "")
    FATHMM_RANKSCORE             = env["FATHMM_RANKSCORE"]
    GENOME_VERSION               = env["GENOME_VERSION"]
    SNPEFF_DATA_DIR              = env["SNPEFF_DATA_DIR"]
    AF_VALUE                     = env["AF_VALUE"]
    AF                           = env["AF"]
    CLINVAR_ANNOTATION_FILE_PATH = env["CLINVAR_ANNOTATION_FILE_PATH"]
    JUNK_GENES_FILE_PATH         = env["JUNK_GENES_FILE_PATH"]
    LEUKEMIA_GENES               = env["LEUKEMIA_GENES"]

    ######################## PARAMETERS CHECKING ######################

    if not os.path.exists(vcf_dir):
        sys.exit(bcolors.ERROR + "Directory {} do not exists".format(vcf_dir) + bcolors.ENDC + "\n")


    # Check GNOMAD_ANNOTATION_FILE_PATH
    if not os.path.exists(GNOMAD_ANNOTATION_FILE_PATH):
        sys.exit(bcolors.ERROR + "Error: GNOMAD_ANNOTATION_FILE_PATH ({}) do not exists".format(GNOMAD_ANNOTATION_FILE_PATH) + bcolors.ENDC + "\n")


    # Check DBSNP_ANNOTATION_FILE_PATH
    if not os.path.exists(DBSNP_ANNOTATION_FILE_PATH):
        sys.exit(bcolors.ERROR + "Error: DBSNP_ANNOTATION_FILE_PATH ({}) do not exists".format(DBSNP_ANNOTATION_FILE_PATH) + bcolors.ENDC + "\n")


    # Check SNPSIFT_PATH
    if not os.path.exists(SNPSIFT_PATH + "/SnpSift.jar"):
        sys.exit(bcolors.ERROR + "Error: SNPSIFT_PATH ({}) is not right. Could not find SnpSift".format(SNPSIFT_PATH) + bcolors.ENDC + "\n")


    # Check CLINVAR_ANNOTATION_FILE_PATH
    if not os.path.exists(CLINVAR_ANNOTATION_FILE_PATH):
        sys.exit(bcolors.ERROR + "Error: CLINVAR_ANNOTATION_FILE_PATH ({}) do not exists".format(CLINVAR_ANNOTATION_FILE_PATH) + bcolors.ENDC + "\n")

    # Check FATHMM_RANKSCORE
    try:
        float(FATHMM_RANKSCORE)
    except:
        sys.exit(bcolors.ERROR + "Error: FATHMM_RANKSCORE ({}) is not right. Shoud be a float between 0 and 1".format(FATHMM_RANKSCORE) + bcolors.ENDC + "\n")

    if float(FATHMM_RANKSCORE) < 0 or float(FATHMM_RANKSCORE) > 1:
        sys.exit(bcolors.ERROR + "FATHMM_RANKSCORE should be <= 0 and >= 1"  + bcolors.ENDC + "\n")


    Help(vars.GenerateHelpText(env))



######################## CHECK IF VCFS EXIST  ######################


all_files = [f for f in os.listdir(vcf_dir) if os.path.isfile(os.path.join(vcf_dir, f))]
vcfs_files = [f for f in all_files if f.endswith(".vcf")]
if len(vcfs_files) == 0:
    sys.exit(bcolors.ERROR + "No .vcf file in {} directory".format(vcf_dir) + bcolors.ENDC + "\n")



######################## DO THE JOB ######################

for vcf in vcfs_files:
    ################ SNPEFF ANNOTATION #####################

    # Check 01_snpsift directory, if do not exists create it
    try: 
        os.makedirs("01_snpeff")
    except OSError:
        if not os.path.exists("01_snpeff"):
            sys.exit(bcolors.ERROR + "Error creating directory 01_snpsift: {}. Check permissions".format(OUTPUT_DIR) + bcolors.ENDC + "\n")

    output_name = build_output_name(vcf, "snpeff_annotated")

    input_file = "00_starting_vcfs/" + vcf

    strelka_vcf = is_a_strelka2_vcf(input_file)

    command = "scons -f snpeff_annotate.scons OUTPUT_DIR=01_snpeff OUTPUT_NAME={} GENOME_VERSION={}".format(output_name, GENOME_VERSION) + " DATA_DIR=~/annotations SNPEFF_PATH={} ".format(SNPSIFT_PATH) + "INPUT_FILE_PATH=${SOURCE}"

    env.Command(["01_snpeff/" + output_name], [input_file], command)



    ################ GNOMAD ANNOTATION STEP #####################

    input_file = "01_snpeff/" + output_name

    output_name = build_output_name(vcf, "gnomad")

    # Command preparation
    first_part = "scons -f snpsift_annotate.scons SNPSIFT_PATH={} ANNOTATION_FILE_PATH={} ".format(SNPSIFT_PATH, GNOMAD_ANNOTATION_FILE_PATH)
    second_part = "INPUT_FILE_PATH=${SOURCE} "
    third_part = "OUTPUT_DIR=02_gnomad/  OUTPUT_NAME={}".format(output_name)
    command = first_part + second_part + third_part

    if DEBUG == "F":
        command += " 2> /dev/null "

    env.Command(["02_gnomad" + "/" + output_name], [input_file], command)



    ################ DBSNP ANNOTATION STEP #####################

    # Check 03_dbsnp directory, if do not exists create it
    try: 
        os.makedirs("03_dbsnp")
    except OSError:
        if not os.path.exists("03_dbsnp"):
            sys.exit(bcolors.ERROR + "Error creating directory 03_dbsnp: {}. Check permissions".format(OUTPUT_DIR) + bcolors.ENDC + "\n")

    input_file = "02_gnomad/" + output_name

    output_name = build_output_name(vcf, "dbsnp")

    # Command preparation
    first_part = "scons -f snpsift_annotate.scons SNPSIFT_PATH={} ANNOTATION_FILE_PATH={} ".format(SNPSIFT_PATH, DBSNP_ANNOTATION_FILE_PATH)
    second_part = "INPUT_FILE_PATH=${SOURCE} "
    third_part = "OUTPUT_DIR=03_dbsnp/  OUTPUT_NAME={}".format(output_name)
    command = first_part + second_part + third_part

    if DEBUG == "F":
        command += " 2> /dev/null "

    env.Command(["03_dbsnp" + "/" + output_name], [input_file], command)



    ################ DBNSFP ANNOTATION STEP #####################

    try: 
        os.makedirs("04_dbnsfp")
    except OSError:
        if not os.path.exists("04_dbnsfp"):
            sys.exit(bcolors.ERROR + "Error creating directory 04_dbnsfp: {}. Check permissions".format(OUTPUT_DIR) + bcolors.ENDC + "\n")

    input_file = "03_dbsnp/" + output_name

    output_name = build_output_name(vcf, "dbnsfp")

    first_part = "scons -f dbnsfp_annotate.scons SNPSIFT_PATH={} ANNOTATION_FILE_PATH={} ".format(SNPSIFT_PATH, DBNSFP_ANNOTATION_FILE_PATH)
    second_part = "INPUT_FILE_PATH=${SOURCE} "
    third_part = "OUTPUT_DIR=04_dbnsfp/  OUTPUT_NAME={}".format(output_name)
    command = first_part + second_part + third_part

    if DEBUG == "F":
        command += " 2> /dev/null "

    env.Command(["04_dbnsfp" + "/" + output_name], [input_file], command)


    ################ CLINVAR ANNOTATION STEP #####################

   # Check 05_high_moderate directory, if do not exists create it
    try: 
        os.makedirs("05_clinvar")
    except OSError:
        if not os.path.exists("05_clinvar"):
            sys.exit(bcolors.ERROR + "Error creating directory 05_clinvar: {}. Check permissions".format(OUTPUT_DIR) + bcolors.ENDC + "\n")

    input_file = "04_dbnsfp/" + output_name

    output_name = build_output_name(vcf, "clinvar")

    first_part = "scons -f snpsift_annotate.scons SNPSIFT_PATH={} ANNOTATION_FILE_PATH={} ".format(SNPSIFT_PATH, CLINVAR_ANNOTATION_FILE_PATH)
    second_part = "INPUT_FILE_PATH=${SOURCE} "
    third_part = "OUTPUT_DIR=05_clinvar/  OUTPUT_NAME={}".format(output_name)
    command = first_part + second_part + third_part

    if DEBUG == "F":
        command += " 2> /dev/null "

    env.Command(["05_clinvar" + "/" + output_name], [input_file], command)
 
    

    ################ HIGH AND MODERATE FILTER #####################

   # Check 05_high_moderate directory, if do not exists create it
    try: 
        os.makedirs("06_high_moderate")
    except OSError:
        if not os.path.exists("06_high_moderate"):
            sys.exit(bcolors.ERROR + "Error creating directory 06_high_moderate: {}. Check permissions".format(OUTPUT_DIR) + bcolors.ENDC + "\n")

    input_file = "05_clinvar/" + output_name

    output_name = build_output_name(vcf, "high_moderate")

    first_part = "scons -f snpsift_filter_by_impact.scons SNPSIFT_PATH={}  ".format(SNPSIFT_PATH)
    second_part = "INPUT_FILE_PATH=${SOURCE} "
    third_part = "OUTPUT_DIR=06_high_moderate/  OUTPUT_NAME={}".format(output_name)
    command = first_part + second_part + third_part

    env.Command(["06_high_moderate" + "/" + output_name], [input_file], command)


    ################ GET ONLY THE PASS VARIANTS #####################

    try: 
        os.makedirs("07_pass")
    except OSError:
        if not os.path.exists("07_pass"):
            sys.exit(bcolors.ERROR + "Error creating directory 07_pass: {}. Check permissions".format(OUTPUT_DIR) + bcolors.ENDC + "\n")

    input_file = "06_high_moderate/" + output_name

    output_name = build_output_name(vcf, "pass")

    command = "scons -f get_pass_variants.scons  INPUT_FILE_PATH=${SOURCE} " + "OUTPUT_DIR=07_pass  OUTPUT_NAME={}".format(output_name)

    env.Command("07_pass/" + output_name, input_file,  command)


    ################ FILTER BY ALTERNATE ALLELE FREQUENCY #####################

    try: 
        os.makedirs("08_population_af")
    except OSError:
        if not os.path.exists("08_population_af"):
            sys.exit(bcolors.ERROR + "Error creating directory 08_population_af: {}. Check permissions".format(OUTPUT_DIR) + bcolors.ENDC + "\n")

    input_file = "07_pass/" + output_name

    output_name = build_output_name(vcf, "population_af")

    command = "scons -f snpsift_filter_by_exome_freq_data.scons DEBUG=T OUTPUT_DIR=08_population_af OUTPUT_NAME={} ".format(output_name) + "INPUT_FILE_PATH={} ".format(input_file) + " SNPSIFT_PATH={} AF_VALUE={} AF={}".format(SNPSIFT_PATH, AF_VALUE, AF)

    env.Command("08_population_af/" + output_name, input_file,  command)
    


    ################ REMOVE JUNK GENES #####################

    try: 
        os.makedirs("09_no_junk")
    except OSError:
        if not os.path.exists("09_no_junk"):
            sys.exit(bcolors.ERROR + "Error creating directory 09_no_junk: {}. Check permissions".format(OUTPUT_DIR) + bcolors.ENDC + "\n")

    input_file = "08_population_af/" + output_name

    output_name = build_output_name(vcf, "no_junk")

    #command = "scons -f remove_junk_genes.scons INPUT_FILE_PATH=${SOURCE} " + "DBNSFP_FATHMM_RANKSCORE={} ".format(FATHMM_RANKSCORE) + "OUTPUT_DIR=09_filtered_by_fathmm OUTPUT_NAME={}".format(output_name) 
    command = "scons -f remove_junk_genes.scons DEBUG=T INPUT_FILE_PATH=${SOURCE} " + "JUNK_GENES_FILE_PATH={} OUTPUT_DIR={}  OUTPUT_NAME={}".format(JUNK_GENES_FILE_PATH, "09_no_junk", output_name)

    env.Command("09_no_junk/" + output_name, input_file,  command)

    

    ################ KEEP ONLY LEUKEMIA GENES #####################

    try: 
        os.makedirs("10_leukemia")
    except OSError:
        if not os.path.exists("10_leukemia"):
            sys.exit(bcolors.ERROR + "Error creating directory 10_leukemia: {}. Check permissions".format(OUTPUT_DIR) + bcolors.ENDC + "\n")

    input_file = "09_no_junk/" + output_name

    output_name = build_output_name(vcf, "leukemia")

    command = "scons -f get_leukemia_genes.scons DEBUG=T INPUT_FILE_PATH=${SOURCE} " + "ANNOTATION_FILE_PATH={} OUTPUT_DIR={} OUTPUT_NAME={}".format(LEUKEMIA_GENES, "10_leukemia", output_name)

    env.Command("10_leukemia/" + output_name, input_file,  command)



    ################ FILTER BY FATHMM_RANKSCORE #####################

    try: 
        os.makedirs("11_filtered_by_fathmm")
    except OSError:
        if not os.path.exists("11_filtered_by_fathmm"):
            sys.exit(bcolors.ERROR + "Error creating directory 11_filtered_by_fathmm: {}. Check permissions".format(OUTPUT_DIR) + bcolors.ENDC + "\n")

    input_file = "10_leukemia/" + output_name

    output_name = build_output_name(vcf, "filtered_by_fathmm")

    command = "scons -f filter_by_fathmm_rankscore.scons INPUT_FILE_PATH=${SOURCE} " + "DBNSFP_FATHMM_RANKSCORE={} ".format(FATHMM_RANKSCORE) + "OUTPUT_DIR=11_filtered_by_fathmm OUTPUT_NAME={}".format(output_name) 

    env.Command("11_filtered_by_fathmm/" + output_name, input_file,  command)



