Import('*')

import os
import sys
import os.path


class bcolors:
    OKGREEN = '\033[92m'
    ERROR   = '\033[91m'
    ENDC    = '\033[0m'


def build_output_name(vcf, software_for_annotation):
    vcf_prefix = vcf.split(".")[0]
    output_name = vcf_prefix + "_" + software_for_annotation +  ".vcf"
    return output_name


try:
    env = env
except NameError as error:
    print bcolors.ERROR + str(error) + bcolors.ENDC
    print bcolors.OKGREEN + "Lets go with the DEFAULT variables" + bcolors.ENDC

    vars = Variables()
    vars.Add("CPUS", "Number of CPUs to use", '1')
    vars.Add("SNPSIFT_PATH", "SnpSift path", "/usr/local/snpEff")
    vars.Add("DEBUG", "Show pipeline error messages", "F")
    vars.Add("GNOMAD_ANNOTATION_FILE_PATH", "The location of the gnomAD file used for annotation", "")
    vars.Add("DBSNP_ANNOTATION_FILE_PATH", "The location of the dbSNP file used for annotation", "")
    vars.Add("DBNSFP_ANNOTATION_FILE_PATH", "The location of the dbNSFP file used for annotation", "")

    env = Environment(ENV = os.environ, SHELL = '/bin/bash', variables = vars)
    Decider('timestamp-newer')    

    CPUS                        = env["CPUS"]
    vcf_dir                     = "00_starting_vcfs"
    DEBUG                       = env["DEBUG"]
    GNOMAD_ANNOTATION_FILE_PATH = env["GNOMAD_ANNOTATION_FILE_PATH"]
    DBSNP_ANNOTATION_FILE_PATH  = env["DBSNP_ANNOTATION_FILE_PATH"]
    DBNSFP_ANNOTATION_FILE_PATH = env["DBNSFP_ANNOTATION_FILE_PATH"]
    SNPSIFT_PATH                = os.path.join(env["SNPSIFT_PATH"], "")

    ######################## PARAMETERS CHECKING ######################

    if not os.path.exists(vcf_dir):
        sys.exit(bcolors.ERROR + "Directory {} do not exists".format(vcf_dir) + bcolors.ENDC + "\n")


    # Check 01_snpsift directory, if do not exists create it
    try: 
        os.makedirs("01_snpsift")
    except OSError, e:
        if not os.path.exists("01_snpsift"):
            sys.exit(bcolors.ERROR + "Error creating directory 01_snpsift: {}. Check permissions".format(OUTPUT_DIR) + bcolors.ENDC + "\n")

    
    # Check 02_dbsnp directory, if do not exists create it
    try: 
        os.makedirs("02_dbsnp")
    except OSError, e:
        if not os.path.exists("02_dbsnp"):
            sys.exit(bcolors.ERROR + "Error creating directory 02_dbsnp: {}. Check permissions".format(OUTPUT_DIR) + bcolors.ENDC + "\n")


    # Check 03_dbnsfp directory, if do not exists create it
    try: 
        os.makedirs("03_dbnsfp")
    except OSError, e:
        if not os.path.exists("03_dbnsfp"):
            sys.exit(bcolors.ERROR + "Error creating directory 03_dbnsfp: {}. Check permissions".format(OUTPUT_DIR) + bcolors.ENDC + "\n")


    # Check GNOMAD_ANNOTATION_FILE_PATH
    if not os.path.exists(GNOMAD_ANNOTATION_FILE_PATH):
        sys.exit(bcolors.ERROR + "Error: GNOMAD_ANNOTATION_FILE_PATH ({}) do not exists".format(GNOMAD_ANNOTATION_FILE_PATH) + bcolors.ENDC + "\n")


    # Check DBSNP_ANNOTATION_FILE_PATH
    if not os.path.exists(DBSNP_ANNOTATION_FILE_PATH):
        sys.exit(bcolors.ERROR + "Error: DBSNP_ANNOTATION_FILE_PATH ({}) do not exists".format(DBSNP_ANNOTATION_FILE_PATH) + bcolors.ENDC + "\n")


    # Check SNPSIFT_PATH
    if not os.path.exists(SNPSIFT_PATH + "/SnpSift.jar"):
        sys.exit(bcolors.ERROR + "Error: SNPSIFT_PATH ({}) is not right. Could not find SnpSift".format(SNPSIFT_PATH) + bcolors.ENDC + "\n")


    Help(vars.GenerateHelpText(env))



######################## CHECK IF VCFS EXIST  ######################


all_files = [f for f in os.listdir(vcf_dir) if os.path.isfile(os.path.join(vcf_dir, f))]
vcfs_files = [f for f in all_files if f.endswith(".vcf")]
if len(vcfs_files) == 0:
    sys.exit(bcolors.ERROR + "No .vcf file in {} directory".format(vcf_dir) + bcolors.ENDC + "\n")



######################## DO THE JOB ######################

for vcf in vcfs_files:

    ################ GNOMAD ANNOTATION STEP #####################

    output_name = build_output_name(vcf, "snpsift")

    input_file = "00_starting_vcfs/" + vcf

    # Command preparation
    first_part = "scons -f snpsift_annotate.scons SNPSIFT_PATH={} ANNOTATION_FILE_PATH={} ".format(SNPSIFT_PATH, GNOMAD_ANNOTATION_FILE_PATH)
    second_part = "INPUT_FILE_PATH=${SOURCE} "
    third_part = "OUTPUT_DIR=01_snpsift/  OUTPUT_NAME={}".format(output_name)
    command = first_part + second_part + third_part

    if DEBUG == "F":
        command += " 2> /dev/null "

    env.Command(["01_snpsift" + "/" + output_name], [input_file], command)


    ################ DBSNP ANNOTATION STEP #####################

    input_file = "01_snpsift/" + output_name

    output_name = build_output_name(vcf, "dbsnp")

    # Command preparation
    first_part = "scons -f snpsift_annotate.scons SNPSIFT_PATH={} ANNOTATION_FILE_PATH={} ".format(SNPSIFT_PATH, DBSNP_ANNOTATION_FILE_PATH)
    second_part = "INPUT_FILE_PATH=${SOURCE} "
    third_part = "OUTPUT_DIR=02_dbsnp/  OUTPUT_NAME={}".format(output_name)
    command = first_part + second_part + third_part

    if DEBUG == "F":
        command += " 2> /dev/null "

    env.Command(["02_dbsnp" + "/" + output_name], [input_file], command)


    ################ DBNSFP ANNOTATION STEP #####################

    input_file = "02_dbsnp/" + output_name

    output_name = build_output_name(vcf, "dbnsfp")

    first_part = "scons -f dbnsfp_annotate.scons SNPSIFT_PATH={} ANNOTATION_FILE_PATH={} ".format(SNPSIFT_PATH, DBNSFP_ANNOTATION_FILE_PATH)
    second_part = "INPUT_FILE_PATH=${SOURCE} "
    third_part = "OUTPUT_DIR=03_dbnsfp/  OUTPUT_NAME={}".format(output_name)
    command = first_part + second_part + third_part

    if DEBUG == "F":
        command += " 2> /dev/null "

    env.Command(["03_dbnsfp" + "/" + output_name], [input_file], command)
    
