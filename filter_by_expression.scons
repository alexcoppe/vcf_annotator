"""
Filters out variants based on their expression level obtained from The Human Protein Atlas.
It uses information from the RNA consensus tissue gene data from the rna_tissue_consensus.tsv.zip file

SITE:
    https://www.proteinatlas.org/
    https://www.proteinatlas.org/about/download

CITATION:
    UhlÃ©n M et al, 2015. Tissue-based map of the human proteome. Science
    PubMed: 25613900 DOI: 10.1126/science.1260419

EXAMPLE:
    scons -f filter_by_expression.scons OUTPUT_DIR=filter_by_expression_values OUTPUT_NAME=filtered_by_expression.vcf INPUT_FILE_PATH=11_leukemia/tumor_control_merged_snps_leukemia.vcf RNA_TISSUE_CONSENSUS=~/annotations/rna_tissue_consensus.tsv.zip NX=2
"""

Import('*')

import os
import sys
import os.path
import subprocess

class bcolors:
    OKGREEN = '\033[92m'
    ERROR   = '\033[91m'
    ENDC    = '\033[0m'



try:
    env = env
except NameError as error:
    print(bcolors.ERROR + str(error) + bcolors.ENDC)
    print(bcolors.OKGREEN + "Lets go with the DEFAULT variables" + bcolors.ENDC)

    vars = Variables()
    vars.Add("OUTPUT_DIR", "Directory for output (default: ./filtered_by_expression)", "./filtered_by_expression")
    vars.Add("OUTPUT_NAME", "Output name (default: filtered_by_expression.vcf)", "filtered_by_expression.vcf")
    vars.Add("INPUT_FILE_PATH", "The location of the VCF file to be filtered", "")
    vars.Add("RNA_TISSUE_CONSENSUS", "The location of the rna_tissue_consensus.tsv.zip file", "")
    vars.Add("NX", "The minimum value of NX to be used for filter (default: 1)", "1")

    env = Environment(ENV = os.environ, SHELL = '/bin/bash', variables = vars)
    Decider('timestamp-newer')    

    OUTPUT_DIR              = env["OUTPUT_DIR"]
    OUTPUT_NAME             = env["OUTPUT_NAME"]
    INPUT_FILE_PATH         = env["INPUT_FILE_PATH"]
    RNA_TISSUE_CONSENSUS    = env["RNA_TISSUE_CONSENSUS"]
    NX                      = env["NX"]


    try:
        # Once moved to python 3.5 change to subprocess.run
        subprocess.Popen(["filter_by_normal_expression.py"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    except:
        sys.exit(bcolors.ERROR + "Could not run filter_by_normal_expression.py".format(OUTPUT_DIR) + bcolors.ENDC + "\n")

    try: 
        os.makedirs(OUTPUT_DIR)
    except OSError:
        if not os.path.exists(OUTPUT_DIR):
            sys.exit(bcolors.ERROR + "Error creating directory OUTPUT_DIR: {}. Check permissions".format(OUTPUT_DIR) + bcolors.ENDC + "\n")

        if os.path.isfile(RNA_TISSUE_CONSENSUS) == False:
            sys.exit(bcolors.ERROR + "File RNA_TISSUE_CONSENSUS: {} do not exists".format(RNA_TISSUE_CONSENSUS) + bcolors.ENDC + "\n")
        if not RNA_TISSUE_CONSENSUS.endswith(".tsv.zip"):
            sys.exit(bcolors.ERROR + "Error: file RNA_TISSUE_CONSENSUS {} is not a .tsv.zip".format(RNA_TISSUE_CONSENSUS) + bcolors.ENDC + "\n")

        if os.path.isfile(INPUT_FILE_PATH) == False:
            sys.exit(bcolors.ERROR + "Error: file INPUT_FILE_PATH {} that should be filtered do not exists".format(INPUT_FILE_PATH) + bcolors.ENDC + "\n")

    try:
        nx = int(NX)
    except:
        sys.exit(bcolors.ERROR + "Error: NX is not an integer".format(INPUT_FILE_PATH) + bcolors.ENDC + "\n")

    Help(vars.GenerateHelpText(env))

TARGET = os.path.join(OUTPUT_DIR, OUTPUT_NAME)
filter_command = "filter_by_normal_expression.py -n {} -x {} ".format(RNA_TISSUE_CONSENSUS, NX)  + " -v  ${SOURCE} > ${TARGET}"

env.Command(TARGET, INPUT_FILE_PATH, filter_command)

