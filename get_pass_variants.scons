"""
Filter variants by FILTER: only PASS are selected

SITE:
    https://samtools.github.io/hts-specs/VCFv4.2.pdf

CITATION:
"""

Import('*')

import os
import sys
import os.path
import subprocess

class bcolors:
    OKGREEN = '\033[92m'
    ERROR   = '\033[91m'
    ENDC    = '\033[0m'



try:
    env = env
except NameError as error:
    print(bcolors.ERROR + str(error) + bcolors.ENDC)
    print(bcolors.OKGREEN + "Lets go with the DEFAULT variables" + bcolors.ENDC)

    vars = Variables()
    vars.Add("OUTPUT_DIR", "Directory for output (default: ./vcf_only_pass)", "./vcf_only_pass")
    vars.Add("OUTPUT_NAME", "Output name (default: vcf_only_pass.vcf)", "vcf_only_pass.vcf")
    vars.Add("INPUT_FILE_PATH", "The location of the VCF file to be filtered", "")

    env = Environment(ENV = os.environ, SHELL = '/bin/bash', variables = vars)
    Decider('timestamp-newer')    

    OUTPUT_DIR              = env["OUTPUT_DIR"]
    OUTPUT_NAME             = env["OUTPUT_NAME"]
    INPUT_FILE_PATH         = env["INPUT_FILE_PATH"]

    try:
        # Once moved to python 3.5 change to subprocess.run
        subprocess.call(["get_pass_variants"])
    except:
        sys.exit(bcolors.ERROR + "Could not run get_pass_variants".format(OUTPUT_DIR) + bcolors.ENDC + "\n")

    try: 
        os.makedirs(OUTPUT_DIR)
    except OSError:
        if not os.path.exists(OUTPUT_DIR):
            sys.exit(bcolors.ERROR + "Error creating directory OUTPUT_DIR: {}. Check permissions".format(OUTPUT_DIR) + bcolors.ENDC + "\n")

    if os.path.isfile(INPUT_FILE_PATH) == False:
        sys.exit(bcolors.ERROR + "Error: file INPUT_FILE_PATH {} that should be filtered do not exists".format(INPUT_FILE_PATH) + bcolors.ENDC + "\n")
#
    Help(vars.GenerateHelpText(env))

OUTPUT_FILE = os.path.join(OUTPUT_DIR, OUTPUT_NAME)
filter_command = "get_pass_variants  ${SOURCE} > ${TARGET}"
env.Command(OUTPUT_FILE, INPUT_FILE_PATH, filter_command)
