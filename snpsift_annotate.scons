"""
SnpSift Annotate: annotate using fields from another VCF file

SITE:
    http://snpeff.sourceforge.net/SnpSift.html#annotate

CITATION:
    A program for annotating and predicting the effects of single nucleotide polymorphisms, SnpEff: SNPs in the genome of Drosophila melanogaster strain w1118; iso-2; iso-3.", Cingolani P, Platts A, Wang le L, Coon M, Nguyen T, Wang L, Land SJ, Lu X, Ruden DM. Fly (Austin). 2012 Apr-Jun;6(2):80-92. PMID: 22728672
"""

Import('*')

import os
import sys
import os.path

class bcolors:
    OKGREEN = '\033[92m'
    ERROR   = '\033[91m'
    ENDC    = '\033[0m'



try:
    env = env
except NameError as error:
    print bcolors.ERROR + str(error) + bcolors.ENDC
    print bcolors.OKGREEN + "Lets go with the DEFAULT variables" + bcolors.ENDC

    vars = Variables()
    vars.Add("CPUS", "Number of CPUs to use", '1')
    vars.Add("SNPSIFT_PATH", "SnpSift path", "/usr/local/snpEff")
    vars.Add("DEBUG", "Show pipeline error messages", "F")
    vars.Add("OUTPUT_DIR", "Directory for output (default: ./SnpSift_annotation)", "./SnpSift_annotation")
    vars.Add("OUTPUT_NAME", "Output name (default: vcf_annotated.vcf)", "vcf_annotated.vcf")
    vars.Add("ANNOTATION_FILE_PATH", "The location of the file used for annotation", "")
    vars.Add("INPUT_FILE_PATH", "The location of the VCF file to be annotated", "")

    env = Environment(ENV = os.environ, SHELL = '/bin/bash', variables = vars)
    Decider('timestamp-newer')    

    CPUS           = env["CPUS"]
    DEBUG          = env["DEBUG"]
    OUTPUT_DIR     = env["OUTPUT_DIR"]
    OUTPUT_NAME    = env["OUTPUT_NAME"]
    ANNOTATION_FILE_PATH = env["ANNOTATION_FILE_PATH"]
    INPUT_FILE_PATH      = env["INPUT_FILE_PATH"]
    SNPSIFT_PATH         = os.path.join(env["SNPSIFT_PATH"], "SnpSift.jar")
    

    try: 
        os.makedirs(OUTPUT_DIR)
    except OSError, e:
        if not os.path.exists(OUTPUT_DIR):
            sys.exit(bcolors.ERROR + "Error creating directory OUTPUT_DIR: {}. Check permissions".format(OUTPUT_DIR) + bcolors.ENDC + "\n")

    if os.path.isfile(SNPSIFT_PATH) == False:
        sys.exit(bcolors.ERROR + "File {} do not exists".format(SNPSIFT_PATH) + bcolors.ENDC + "\n")

    if os.path.isfile(ANNOTATION_FILE_PATH) == False:
        sys.exit(bcolors.ERROR + "File {} do not exists".format(ANNOTATION_FILE_PATH) + bcolors.ENDC + "\n")

    if os.path.isfile(INPUT_FILE_PATH) == False:
        sys.exit(bcolors.ERROR + "File {} to be annotated do not exists".format(INPUT_FILE_PATH) + bcolors.ENDC + "\n")
        

    Help(vars.GenerateHelpText(env))

    if vars.UnknownVariables():
        list_of_unknown_keys = ",".join(vars.UnknownVariables().keys())
        sys.stderr.write(bcolors.ERROR + "Unknown variables: " + list_of_unknown_keys + bcolors.ENDC + "\n")
        Exit(1)

SNPSIFT_TARGET = os.path.join(OUTPUT_DIR, OUTPUT_NAME)
annotationCmd = "java -jar {} annotate ".format(SNPSIFT_PATH) + "${SOURCES[0]} ${SOURCES[1]}" + " > ${TARGET}"
if DEBUG == "F":
    annotationCmd += " 2> /dev/null "

ANNOTATION_AND_INPUT_FILE_PATHS = [ANNOTATION_FILE_PATH, INPUT_FILE_PATH]
env.Command(SNPSIFT_TARGET, ANNOTATION_AND_INPUT_FILE_PATHS, annotationCmd)
